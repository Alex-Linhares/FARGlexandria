unit Association1Unit;

interface

uses activation1Unit, Node1Unit;

type

         TLink = Class (TActivationObserverClass)

                      link_drag: real;
                      Dest_Node: TNode;

                      constructor create (destination: TNode; drag: real);

                      {Observer Interface here}
                      procedure Update(Received_Activation: Tactivation);
                 end;


implementation


constructor TLink.create (destination: TNode; drag: real);
begin
     Link_drag:= drag;
     Dest_Node:=destination;
end;


Procedure Tlink.Update(Received_Activation: Tactivation);  {este método recebe o sinal de propagação de ativação do nó Tnode}
var step: real;
begin
     {I will implement directly here, but it should really be a strategy pattern, and this method should be refactored to strategy pattern to include other possibilities soon}

     step:= {0.65}link_drag*Received_Activation.Get_Increment;
     Dest_node.activation.increase(step);
end;


end.                                                     
