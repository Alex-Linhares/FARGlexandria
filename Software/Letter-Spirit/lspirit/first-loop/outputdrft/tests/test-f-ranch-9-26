Chez Scheme Transcript [Sun Sep 26 09:52:33 1999]
>>>> (try-gridfont 'flournoy-ranch)
Tried to draw a y Ruled (20 23 8 9 22 25 28 43 12) a y1 score of 59.039
Tried to draw a r Ruled (20 23 4 5 22) a r1 score of 72.902
Tried to draw a x Ruled (48 51 38 37) a x1 score of 78.464
Tried to draw a n Ruled (20 23 34 3 19 22 25 9) a n1 score of 133.21
Tried to draw a l Ruled (15 18 21 51) a l1 score of 50.718
Tried to draw a s Ruled (19 3 2 17 48 7 25 28 11 52) a y1
Tried to draw a v Ruled (22 39 4 21 24) a v1 score of 102.083
Tried to draw a z Ruled (38 37 8 9 4 5) a z1 score of 83.869
Tried to draw a s Ruled (19 3 2 17 48 7 25 28 11 27 40) a y1
Tried to draw a p Ruled (36 5 22 25 41 20 23 26 54) a p1 score of 93.903
Tried to draw a a Ruled (36 21 37 34 3 19 22 25) a r1
Tried to draw a j Ruled (22 25 28 43 12 3) a j1 score of 74.19
Tried to draw a k Ruled (14 17 20 23 36 5 50 9) a k1 score of 98.05
Tried to draw a a Ruled (34 3 19 22 25) a l1
Tried to draw a u Ruled (22 25 20 23 8 9) a u1 score of 73.924
Tried to draw a q Ruled (20 34 3 35 21 38 22 25 28 31) a j1
Tried to draw a q Ruled (22 25 28 47 2 17 20 23) a h1
Tried to draw a i Ruled (19 49 25 9) a i1 score of 122.792
Tried to draw a d Ruled (47 2 17 20 23 8 9 16 19 22 25) a d1 score of 93.534
Tried to draw a s Ruled (19 3 2 17 48 7 25 9 8) a s2 score of 122.75
Tried to draw a h Ruled (4 5 22 25 14 17 20) a h1 score of 81.039
Tried to draw a m Ruled (4 21 24 20 23 5 22 25) a m1 score of 71.17
Tried to draw a w Ruled (20 50 24 22 25 21 51) a w1 score of 74.448
Tried to draw a t Ruled (18 21 38 36 5) a r1
Tried to draw a q Ruled (47 2 17 20 23 8 9 22 25 28) a r1
Tried to draw a t Ruled (4 5 18 21 6 23) a t1 score of 76.081
Tried to draw a q Ruled (47 2 17 20 23 8 9 22 25 28 31) a q1 score of 89.57
Tried to draw a o Ruled (20 34 3 19 22 25 9) a n1
Tried to draw a o Ruled (20 34 3 19 22 25 9 50) a o1 score of 106.532
Tried to draw a a Ruled (7 38 8 9 34 3 19 22 25) a a1 score of 112.407
Tried to draw a d Ruled (1 0 14 46 21 38 20 34 3 19 22 25 9) a x1
Tried to draw a h Ruled (34 3 19 22 25 17 20 23 8 24 21 18 44 0) a x1
Tried to draw a p Ruled (20 23 26 29 4 5 22 25 9 8) a p1 score of 64.773
Tried to draw a s Ruled (5 21 7 25 9 8) a s2 score of 60.758
Tried to draw a i Ruled (3 5 22 25) a i1 score of 96.581
Tried to draw a h Ruled (34 3 19 22 25 14 17 20) a h1
Tried to draw a a Ruled (49 36 23 8 9 34 3 19 22 25) a d1
Tried to draw a a Ruled (49 36 23 34 3 19 22 25) a h1
Tried to draw a o Ruled (20 34 3 19 22 25 9 50) a o1
Tried to draw a d Ruled (16 19 22 39 9 28 11 30 47 2 17 20 23) a o1
Tried to draw a w Ruled (20 50 24 22 25 21 51) a w1
Tried to draw a j Ruled (22 25 28 43 12 35) a j1 score of 60.518
Tried to draw a a Ruled (36 21 38 8 39 34 3 19 22 25) a n1
Tried to draw a l Ruled (15 18 21 51) a l1
Tried to draw a l Ruled (15 18 21 51) a l1 score of 49.112
Tried to draw a n Ruled (34 3 19 22 25 20 23) a l1
Tried to draw a w Ruled (22 39 20 23 8 21 24) a u1
Tried to draw a w Ruled (22 7 24 53 36 23 34 2 46 21 38 8 39 25 28) a u1
Tried to draw a q Ruled (47 2 17 20 23 8 9 22 25 28 31) a q1
Tried to draw a k Ruled (4 5 14 17 20 48 51) a k1 score of 76.376
Tried to draw a z Ruled (8 9 4 5 38 37) a z1 score of 81.62
Tried to draw a t Ruled (4 5 18 21 6 23 8 9) a t1
Tried to draw a x Ruled (6 51 38 37) a x1
Tried to draw a s Ruled (19 3 2 17 48 7 25 28) a l1
Tried to draw a z Ruled (4 5 8 9 38 37) a z1
Tried to draw a p Ruled (20 23 26 54 34 3 19 22 25) a y2
Tried to draw a t Ruled (4 5 18 21 6 23) a t1 score of 71.121
Tried to draw a o Ruled (20 34 3 19 22 25 9 50) a o1
Tried to draw a x Ruled (48 51 38 37) a x1
Tried to draw a a Ruled (49 36 23 8 9 34 3 19 22 25) a d1
Tried to draw a a Ruled (34 3 19 5 46 14 0 1 23 6 24 39 25) a i1
Tried to draw a a Ruled (36 21 38 8 39 34 3 19 22 25) a n1
Tried to draw a s Ruled (8 9 36 5) a i1
Tried to draw a i Ruled (45 5 22 25) a i1 score of 70.092
Tried to draw a x Ruled (21 51 38 37) a x1 score of 54.762
Tried to draw a q Ruled (22 25 28 31 47 2 17 20 23) a x1
Tried to draw a t Ruled (4 5 18 21 6 23) a t1 score of 67.603
Tried to draw a v Ruled (22 39 4 21 24) a v1
Tried to draw a i Ruled (7 25 9 27 11 31 35) a j1
Tried to draw a q Ruled (5 4 20 23 8 9 22 25 28 31) a q1 score of 65.928
Tried to draw a x Ruled (38 37 50 9) a x1
Tried to draw a u Ruled (20 23 8 9 22 25) a u1
Tried to draw a q Ruled (22 25 28 43 47 2 17 20 23) a n1
Tried to draw a y Ruled (20 23 8 9 22 25 28 43 12) a y1
Tried to draw a r Ruled (23 36 5) a r1
Tried to draw a k Ruled (21 51 14 17 20 4 5) a k1 score of 68.555
Tried to draw a k Ruled (14 17 20 6 36 5 50 9) a k1 score of 54.813
Tried to draw a o Ruled (20 34 3 19 22 25 9 50) a o1
Tried to draw a o Ruled (20 4 5 22 25 9 50) a o1 score of 50.046
Tried to draw a n Ruled (20 23 34 3 19 22 25) a n1 score of 107.974
Tried to draw a w Ruled (20 50 24 22 25 21 51) a w1 score of 72.498
Tried to draw a u Ruled (20 23 8 9 22 25) a u1
Tried to draw a i Ruled (49 25 19) a i1
Tried to draw a q Ruled (22 25 28 31 5 4 20 23) a q1
Tried to draw a a Ruled (7 25 9 8 26 49 4 20 23) a q1
Tried to draw a q Ruled (5 4 20 23 8 9 22 25 28 43) a g1
Tried to draw a n Ruled (34 3 19 22 25 20 23) a l1
Tried to draw a t Ruled (18 21 38 8 9 25 36 5) a t1 score of 52.37
Tried to draw a r Ruled (4 5 22 20 23) a r1
Tried to draw a n Ruled (4 5 22 25 20 23) a n1 score of 86.949
Tried to draw a n Ruled (20 23 34 3 19 22 25) a l1
Tried to draw a k Ruled (21 51 14 17 20 4 5) a k1
Tried to draw a a Ruled (36 21 38 8 39 34 3 19 22 25) a n1
Tried to draw a d Ruled (19 22 25 47 2 17 20 23) a h1
Tried to draw a r Ruled (20 23 4 5) a r1
Tried to draw a j Ruled (49 25 28 43 12 19) a j1
Tried to draw a y Ruled (20 23 8 9 22 25 28 43 12) a y1 score of 47.048
Tried to draw a z Ruled (4 5 38 37 8 9) a z1 score of 80.43
Tried to draw a m Ruled (37 22 25 20 23 48 24) a m1

debug> n
>>>>> *the-whole*
a1
>>>>> *own-stuff*
(7 25 9 8 26 10 11 31)
>>>>> (exit)
debug> e

debug> n
>>>>> *the-whole*
a1
>>>>> (exit)
debug> i
#<system continuation in #list-length>                            : d
#<system continuation in map>                                     : s
  continuation:          #<continuation in longest>
  free variables:
  0: ((*w*) () ())
  1: #<system procedure length>
#<system continuation in map>                                     : d
#<continuation in longest>                                        : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls-ls) (if (null? ls-ls) (quote ()) ...))
  call code:             (map length ls-ls)
  free variables:
  0. ls-ls:              ((*w*) () ())
#<continuation in longest>                                        : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*w*)
  1. ls1:                (*w* *w*)
  2: (*w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*w* *w*)
  1. ls1:                (*w* *w*)
  2: (*w* *w*)
  3: (*w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*w* *w*)
  1. ls1:                (*n* *w* *w*)
  2: (*w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*w* *w*)
  1. ls1:                (*n* *n* *w* *w*)
  2: ()
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*w* *w*)
  1. ls1:                (*se* *n* *n* *w* *w*)
  2: ()
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*w* *w*)
  1. ls1:                (*s* *se* *n* *n* *w* *w*)
  2: ()
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*s* *w* *w*)
  1. ls1:                (*s* *se* *n* *n* *w* *w*)
  2: (*s*)
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*s* *w* *w*)
  1. ls1:                (*ne* *s* *se* *n* *n* *w* *w*)
  2: ()
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*e* *s* *w* *w*)
  1. ls1:                (*ne* *s* *se* *n* *n* *w* *w*)
  2: (*s*)
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*e* *e* *s* *w* *w*)
  1. ls1:                (*ne* *s* *se* *n* *n* *w* *w*)
  2: ()
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*e* *e* *s* *w* *w*)
  1. ls1:                (*n* *ne* *s* *se* *n* *n* *w* *w*)
  2: (*s*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: ()
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*s* *e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: (*s*)
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*s* *e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: ()
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*w* *s* *e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: (*s*)
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*w* *w* *s* *e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: ()
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: (*w*)
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in biggest-overlap>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap ls1 (cdr ls2))
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. ls1:                (*n* *n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: (*w* *w*)
  3: (*w* *w*)
#<continuation in biggest-overlap>                                : d
#<continuation in biggest-overlap>                                : s
  continuation:          #<continuation in sublists-include>
  procedure code:        (lambda (ls1 ls2) (if ((...) (...)) (quote ()) ...))
  call code:             (biggest-overlap (cdr ls1) ls2)
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. ls1:                (*sw* *n* *n* *n* *ne* *s* *se* *n* *n* *w* *w*)
  2: (*w*)
#<continuation in biggest-overlap>                                : d
#<continuation in sublists-include>                               : s
  continuation:          #<continuation in sublists-include>
  procedure code:        (lambda (sublists ls2) (if (...) ...))
  call code:             (biggest-overlap (car sublists) ls2)
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. sublists:           ((*sw* *n* ...) (*n* *n* ...) ...)
#<continuation in sublists-include>                               : d
#<continuation in sublists-include>                               : s
  continuation:          #<continuation in sublists-include>
  procedure code:        (lambda (sublists ls2) (if (...) ...))
  call code:             (sublists-include (cdr sublists) ls2)
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. sublists:           ((*w* *n*) (*sw* *n* *n* ...) (*n* *n* *n* ...) ...)
  2: (*w*)
#<continuation in sublists-include>                               : d
#<continuation in sublists-include>                               : s
  continuation:          #<continuation in sublists-include>
  procedure code:        (lambda (sublists ls2) (if (...) ...))
  call code:             (sublists-include (cdr sublists) ls2)
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. sublists:           ((*w* *w* *n*) (*w* *n*) (*sw* *n* *n* ...) ...)
  2: (*w* *w*)
#<continuation in sublists-include>                               : d
#<continuation in sublists-include>                               : s
  continuation:          #<continuation in sublists-include>
  procedure code:        (lambda (sublists ls2) (if (...) ...))
  call code:             (sublists-include (cdr sublists) ls2)
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. sublists:           ((*w* *n* *n*) (*w* *w* *n*) (*w* *n*) ...)
  2: (*w*)
#<continuation in sublists-include>                               : d
#<continuation in sublists-include>                               : s
  continuation:          #<continuation in sublists-include>
  procedure code:        (lambda (sublists ls2) (if (...) ...))
  call code:             (sublists-include (cdr sublists) ls2)
  free variables:
  0. ls2:                (*e* *s* *w* *w* *s* *e* *e* *s* *w* *w*)
  1. sublists:           ((*w* *w* *n* ...) (*w* *n* *n*) (*w* *w* *n*) ...)
  2: (*w* *w*)
#<continuation in sublists-include>                               : q

debug> n
>>>>> (lazy-worm-crawl *quanta-list*)

Error in cdr: () is not a pair.
Type (debug) to enter the debugger.
>>>>> *quanta-list*
()
>>>>> (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(39 25)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(46 5 19)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(14 0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(25 39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(6 24 39)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(46 14)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(23 6 24 39)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(3 19 5 46)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(5 46 14)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(14 0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(19 5 46 14 0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(0 14 46)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(39 25)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(5 46 14)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(25 39 24 6)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(25 39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0 14 46 5)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(46 14 0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(24 39 25)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(5 46 14 0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(19 5 46 14 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(5 19 3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(46 14 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(14 46 5 19 3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0 14 46)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(39 25)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(34 3)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(14 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(19 3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0 14 46 5)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(34 3 19 5 46 14)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(0 1)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(25 39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0 14 46 5 19)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(25 39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(3 34)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(24 39 25)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(34 3 19 5 46 14)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(23 6)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(19 5)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(25 39 24 6 23)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(1 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(3 19 5 46 14 0)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(24 39 25)
>>>>>  (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25))
(24 6 23)
>>>>> (n-copies
 (lazy-worm-crawl '(34 3 19 5 46 14 0 1 23 6 24 39 25)) 6)
((46 14 0 1)
 (46 14 0 1)
 (46 14 0 1)
 (46 14 0 1)
 (46 14 0 1)
 (46 14 0 1))
>>>>> (show-tf)
(((*val-to-val-nvs*
    ((right-edge (r-edge-rt r-edge-md))
     (height (medium-ht tall))
     (tips (tip (6 13)))
     (touch (c-lf c-rt))
     (curve (*strong-left* *slight-left*))
     (tips (down-tip (6 13)))
     (tips (tip (4 9)))
     (tips (left-tip (4 9)))
     (weight (medium-wt huge))
     (touch (t1 m))
     (left-edge (l-edge-md l-edge-lf))
     (tips (tip (12 4)))
     (curve (*full-right* *slight-right*))
     (tips (down-tip (12 4)))
     (roof (roof-x-height roof-t-height))
     (tips (tip (19 11)))
     (height (no-height very-short))
     (tips (left-tip (4 10)))
     (curve (*square-right* *full-right*))
     (tips (down-tip (19 11)))
     (tips (tip (4 10)))
     (roof (roof-midline roof-x-height))
     (tips (up-tip (17 11)))
     (tips (down-tip (19 18)))
     (tips (tip (19 18)))
     (curve (*straight* *full-right*))
     (right-edge (r-edge-lf r-edge-md))
     (tips (up-tip (1 9)))
     (curve (*slight-right* *straight*))
     (weight (medium-wt heavy))
     (width (skinny half-wide))
     (tips (tip (1 9)))))
  (*turn-45-motifs*
    ((45 180 90 135 135 180 180 45)
     (180 180 -135 45)
     (90 135 45 180 90)
     (180)
     (-135 -90 -90)
     (180 -45 -135 90)))
  (*relative-nvs*
    ((tips (tip *e*))
     (right-edge less)
     (tips (down-tip *e*))
     (touch #<void>)
     (tips (tip *outward*))
     (left-edge more)
     (touch out-of)
     (tips (left-tip *outward*))
     (weight less)
     (tips (up-tip *sw*))
     (tips (tip *n*))
     (tips (tip *sw*))
     (tips (down-tip *n*))
     (right-edge more)
     (tips (up-tip *se*))
     (tips (tip *se*))))
  (*literal-motifs* ((50 8) (14 44)))
  (*turn-180-motifs* ((*n* *n*)))
  (*abstract-rules*
    (ban-bottomedge
      at-most-2
      ban-corners
      ban-foreslash-quanta
      ban-topright
      ban-topedge
      ban-horiz-quanta))
  (*translate-motifs* ())
  (*turn-90-motifs*
    ((*n* *n* *se*)
     (*nw* *s* *s* *s* *se* *n* *ne* *s* *s* *w* *w*)
     (*n* *n* *sw* *s* *nw* *n* *n* *n* *se*)
     (*nw* *s* *s*)
     (*e* *e* *n* *n* *sw* *s*)
     (*e* *n*))))
 ((*turn-45-motifs* ((-90 180 -45 -135) (90) (180 45)))
  (*literal-motifs*
    ((25) (50 24) (22) (20) (20 50) (50) (50 20)))
  (*turn-180-motifs*
    ((*n* *n* *n* *se*)
     (*n* *n* *se*)
     (*s* *s* *se*)
     (*se* *e*)
     (*sw* *s*)
     (*nw* *s*)
     (*s*)
     (*n* *se*)))
  (*relative-nvs*
    ((tips (down-tip *nw*))
     (roof more)
     (tips (tip *ne*))
     (tips (left-tip *ne*))
     (tips (tip *nw*))
     (curve less)
     (tips (up-tip *inward*))))
  (*val-to-val-nvs*
    ((weight (light very-light))
     (left-edge (l-edge-lf l-edge-md))))
  (*abstract-rules* (ban-vertedges ban-180-angle))
  (*translate-motifs* ((*s* *se*) (*nw*) (*s*) (*nw* *n*)))
  (*turn-90-motifs* ()))
 ((*relative-nvs*
    ((curve more)
     (weight more)
     (width less)
     (height more)
     (tips (down-tip *inward*))))
  (*literal-motifs* ((20) (50)))
  (*turn-180-motifs* ())
  (*translate-motifs* ((*n*) (*nw*) (*se*)))
  (*val-to-val-nvs* ((width (wide half-wide))))
  (*abstract-rules* (at-most-3))
  (*turn-90-motifs* ((*sw* *n*) (*nw* *n*) (*ne* *s*)))
  (*turn-45-motifs* ()))
 ((*relative-nvs* ((tips (tip *inward*)) (left-edge less)))
  (*turn-180-motifs* ((*e* *s*)))
  (*translate-motifs* ((*n* *se*) (*s*)))
  (*val-to-val-nvs* ())
  (*abstract-rules* ())
  (*literal-motifs* ())
  (*turn-90-motifs* ())
  (*turn-45-motifs* ()))
 ((*translate-motifs* ((*s*)))
  (*relative-nvs* ())
  (*val-to-val-nvs* ())
  (*abstract-rules* ())
  (*literal-motifs* ())
  (*turn-180-motifs* ())
  (*turn-90-motifs* ())
  (*turn-45-motifs* ()))
 ((*relative-nvs* ())
  (*val-to-val-nvs* ())
  (*abstract-rules* ())
  (*literal-motifs* ())
  (*translate-motifs* ())
  (*turn-180-motifs* ())
  (*turn-90-motifs* ())
  (*turn-45-motifs* ())))
>>>>> (load "motif.ss")
>>>>> (transcript-off)
